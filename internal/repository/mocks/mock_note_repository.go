// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/almira-galeeva/note-service-api/internal/repository (interfaces: NoteRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/almira-galeeva/note-service-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteRepository) CreateNote(arg0 context.Context, arg1 *model.NoteBody) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteRepositoryMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteRepository)(nil).CreateNote), arg0, arg1)
}

// DeleteNote mocks base method.
func (m *MockNoteRepository) DeleteNote(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteRepositoryMockRecorder) DeleteNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNoteRepository)(nil).DeleteNote), arg0, arg1)
}

// GetListNote mocks base method.
func (m *MockNoteRepository) GetListNote(arg0 context.Context, arg1 []int64) ([]*model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListNote", arg0, arg1)
	ret0, _ := ret[0].([]*model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListNote indicates an expected call of GetListNote.
func (mr *MockNoteRepositoryMockRecorder) GetListNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListNote", reflect.TypeOf((*MockNoteRepository)(nil).GetListNote), arg0, arg1)
}

// GetNote mocks base method.
func (m *MockNoteRepository) GetNote(arg0 context.Context, arg1 int64) (*model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", arg0, arg1)
	ret0, _ := ret[0].(*model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNoteRepositoryMockRecorder) GetNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNoteRepository)(nil).GetNote), arg0, arg1)
}

// UpdateNote mocks base method.
func (m *MockNoteRepository) UpdateNote(arg0 context.Context, arg1 *model.UpdateNoteInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteRepositoryMockRecorder) UpdateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNoteRepository)(nil).UpdateNote), arg0, arg1)
}
